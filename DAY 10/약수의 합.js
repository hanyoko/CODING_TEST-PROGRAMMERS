//나의 풀이 - 틀렸습니다.
function solution(n) {
    var answer = [];
    
    for (let i=0; i<=n; i++){
        if(n % i == 0){
            answer.push(i);
        }
    }
    return answer.reduce((a, b) => a + b);
}

//어색했던 메소드 사용이 조금은(?) 익숙해진 것 같다
//빈배열 변수를 만들어주고 for문 안의 조건문을 이용해서 n의 값 나눌 수 있다는 건 약수라는 말이니,
//나머지가 0일 때, 빈배열 변수 answer에 push를 이용해 i 값을 넣어주었다.
//그리고 마지막에 reduce를 이용해서 배열에 들어간 모든 i 값을 더해주었다 !

///

//나의 풀이 - 정답입니다.
function solution(n) {
    var answer = [];
    
    for (let i=0; i<=n; i++){
        if(n % i == 0){
            answer.push(i);
        }
    }
    return answer.reduce((a, b) => a + b, 0);
}

//코드를 실행했을 때 정상적으로 돌아가길래 정답인 줄(?) 알고 풀이를 작성했다.
//하지만 막상 답안을 제출했을 때는 틀렸습니다. 를 얻었다 ......
//그래서 내가 푼 코드를 다시 확인해봤더니 .. 0일 때를 고려하지 않고 풀었더라
//reduce 구문의 마지막에 ,0 을 추가해주며 n이 0일 때를 고려하여 초기값을 설정했다 !

//다른 사람의 풀이
function solution(num) {
    let sum = 0;
    for (let i = 1; i <= num; i++) {
        if (num % i === 0) sum += i
    }
    return sum
}

//내가 조금 어렵게(?) 접근했던 것 같다.
//꼭 배열을 만들어 넣어주고 합쳐주고 하는 번거러움 없이
//변수에 바로 값을 더해줬으면 더 빠른 코드 실행이 이루어졌을 것 같다
//많은 기능을 사용하면 익숙해지는 장점이 있겠지만 코드 실행이 빠를수록 점수를 많이 주기에 점수는 낮게 받는다는 단점이 ....